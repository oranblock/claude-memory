typescriptCopyimport { Request, Response, NextFunction } from 'express';
import { TaskService } from '../services/taskService';
import { CreateTaskDto, UpdateTaskDto } from '../types/task';
import { BadRequestError, NotFoundError } from '../utils/errors';
import { StatusCodes } from 'http-status-codes';

/**
 * Task controller for CRUD operations on tasks
 */
export class TaskController {
  private taskService: TaskService;

  constructor() {
    this.taskService = new TaskService();
  }

  /**
   * Get all tasks for the authenticated user
   */
  public getAllTasks = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const userId = req.user?.id;

      if (!userId) {
        throw new BadRequestError('User ID is required');
      }

      const tasks = await this.taskService.findAllByUserId(userId);
      res.status(StatusCodes.OK).json(tasks);
    } catch (error) {
      next(error);
    }
  };

  /**
   * Get a specific task by ID
   */
  public getTaskById = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const taskId = req.params.id;
      const userId = req.user?.id;

      if (!userId) {
        throw new BadRequestError('User ID is required');
      }

      const task = await this.taskService.findByIdAndUserId(taskId, userId);

      if (!task) {
        throw new NotFoundError('Task not found');
      }

      res.status(StatusCodes.OK).json(task);
    } catch (error) {
      next(error);
    }
  };

  /**
   * Create a new task
   */
  public createTask = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const taskData: CreateTaskDto = req.body;
      const userId = req.user?.id;

      if (!userId) {
        throw new BadRequestError('User ID is required');
      }

      // Assign the task to the authenticated user
      taskData.userId = userId;

      const task = await this.taskService.create(taskData);
      res.status(StatusCodes.CREATED).json(task);
    } catch (error) {
      next(error);
    }
  };

  /**
   * Update an existing task
   */
  public updateTask = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const taskId = req.params.id;
      const taskData: UpdateTaskDto = req.body;
      const userId = req.user?.id;

      if (!userId) {
        throw new BadRequestError('User ID is required');
      }

      // Check if the task exists and belongs to the user
      const existingTask = await this.taskService.findByIdAndUserId(taskId, userId);

      if (!existingTask) {
        throw new NotFoundError('Task not found');
      }

      const updatedTask = await this.taskService.update(taskId, taskData);
      res.status(StatusCodes.OK).json(updatedTask);
    } catch (error) {
      next(error);
    }
  };

  /**
   * Delete a task
   */
  public deleteTask = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const taskId = req.params.id;
      const userId = req.user?.id;

      if (!userId) {
        throw new BadRequestError('User ID is required');
      }

      // Check if the task exists and belongs to the user
      const existingTask = await this.taskService.findByIdAndUserId(taskId, userId);

      if (!existingTask) {
        throw new NotFoundError('Task not found');
      }

      await this.taskService.delete(taskId);
      res.status(StatusCodes.NO_CONTENT).send();
    } catch (error) {
      next(error);
    }
  };

  /**
   * Update task status to completed
   */
  public completeTask = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const taskId = req.params.id;
      const userId = req.user?.id;

      if (!userId) {
        throw new BadRequestError('User ID is required');
      }

      // Check if the task exists and belongs to the user
      const existingTask = await this.taskService.findByIdAndUserId(taskId, userId);

      if (!existingTask) {
        throw new NotFoundError('Task not found');
      }

      const updatedTask = await this.taskService.update(taskId, { status: 'completed' });
      res.status(StatusCodes.OK).json(updatedTask);
    } catch (error) {
      next(error);
    }
  };
}