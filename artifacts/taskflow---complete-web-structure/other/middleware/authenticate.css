typescriptCopyimport { Request, Response, NextFunction } from 'express';
import { verifyToken } from '../utils/jwt';
import { UserService } from '../services/userService';
import { UnauthorizedError } from '../utils/errors';

/**
 * Middleware to authenticate and authorize API requests
 */
export const authenticate = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    // Get token from cookie or authorization header
    let token = req.cookies.token;

    // If no token in cookie, check authorization header
    if (!token && req.headers.authorization) {
      const authHeader = req.headers.authorization;
      if (authHeader.startsWith('Bearer ')) {
        token = authHeader.substring(7);
      }
    }

    if (!token) {
      throw new UnauthorizedError('Authentication required');
    }

    // Verify token
    const decoded = verifyToken(token);
    
    if (!decoded || !decoded.id) {
      throw new UnauthorizedError('Invalid authentication token');
    }

    // Check if user exists
    const userService = new UserService();
    const user = await userService.findById(decoded.id);

    if (!user) {
      throw new UnauthorizedError('User not found');
    }

    // Attach user to request object
    req.user = {
      id: user.id,
    };

    next();
  } catch (error) {
    next(error);
  }
};